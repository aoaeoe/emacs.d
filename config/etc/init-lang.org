* init-lang.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-lang.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; init-lang.el ---   -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code :
  (require 'init-custom)
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    ;;:hook (after-init . global-flycheck-mode)
    )
#+end_src

** LSP Mode
如使用 =cape= 和 =corfu= 代替 =company= ，则最后的重置 ~company-backends~ 略过。
目前仍然使用 =company= ，因此还需配置。
设置 =LSP Mode= 默认不加载。
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook
    (;;(prog-mode . (lambda ()
     ;;               ;; Ask lsp mode load
     ;;               (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
     ;;                 (lsp-deferred))))
     (lsp-mode . (lambda ()
                   ;; Intergrate `which-key'
                   (lsp-enable-which-key-integration)

                   ;; Format and organize imports
                   (when (and leesin-lsp-format-on-save
                              (not (apply #'derived-mode-p leesin-lsp-format-on-save-ignore-modes)))
                     (add-hook 'before-save-hook #'lsp-format-buffer t t)
                     (add-hook 'before-save-hook #'lsp-organize-imports t t))))
      ;;Reset company backends
      ;;In this way can emacs show company-yasnippet
      ;;Refered from doom-emacs
      (lsp-completion-mode . (lambda ()
                                 (when lsp-completion-mode
                                   (setq-local company-backends
                                               (remq 'company-capf company-backends)))))
     )
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-prefer-flymake nil)
    (setq lsp-completion-provider t)
    ;;`lsp-prefer-capf' is an obsolete variable,use `lsp-completion-provider' instead.
    (setq lsp-enable-snippet t)
    (setq lsp-completion-enable t)
    ;; `lsp-enable-completion-at-point' is an obsolete variable,use `lsp-completion-enable' instead.
    (setq lsp-keep-workspace-alive nil)
    (setq lsp-enable-file-watchers nil)
    (setq lsp-semantic-tokens-enable nil)
    ;; `lsp-enable-semantic-highlighting' is an obsolete variable,use `lsp-semantic-tokens-enable' instead.
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-text-document-color nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-indentation nil)
    (setq lsp-enable-on-type-formatting nil)
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-clients-clangd-args '("-j=3"
                                    "--background-index"))
    )

  (with-eval-after-load 'lsp-mode
    (lsp-register-client
      (make-lsp-client :new-connection (lsp-stdio-connection "nixd")
                       :major-modes '(nix-mode)
                       :priority 0
                       :server-id 'nixd))
    )
#+end_src

** LSP UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config (setq lsp-ui-flycheck-enable t)
    :commands lsp-ui-mode)
#+end_src

** Tree Sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :defer t
    ;; use tree sitter mode and highlighting globally
    :hook
    (c-mode . tree-sitter-mode)
    (c++-mode . tree-sitter-mode)
    (lisp-mode . tree-sitter-mode)
    (rust-mode . tree-sitter-mode)
    (python-mode . tree-sitter-mode)
    (tree-sitter-after-on . tree-sitter-hl-mode)

    :config
    (require 'tree-sitter-langs)
    )
#+end_src

#+begin_src emacs-lisp
  (use-package tree-sitter-langs
    :ensure t
    :defer t
    :after tree-sitter
    :config
    (tree-sitter-require 'c)
    (tree-sitter-require 'cpp)
    (tree-sitter-require 'rust)
    (tree-sitter-require 'python)
    (tree-sitter-require 'lua)
    )
#+end_src
** Citre
先进的 =Ctags= 前端。
注意：使用 =ctags= 时，针对 =C/C++= 项目，建议显式指明 ~--language=C,C++~ 而非单独的 =C= 或 =C++= ，否则可能不会生成有关头文件的 =file kind tag= ，这是有关 =ctags= 的一个 =issue= 
#+begin_src emacs-lisp
  (use-package citre
    :ensure t
    :hook
    (prog-mode . citre-mode)
    :bind (:map prog-mode-map
                ("C-x c j" . citre-jump+)
                ("C-x c k" . citre-jump-back+)
                ("C-x c p" . citre-peek)
                ("C-x c a" . citre-ace-peek)
                ("C-x c u" . citre-update-this-tags-file))
    :init
    (setq citre-auto-enable-citre-mode-modes '(prog-mode)
          citre-default-create-tags-file-location 'global-cache
          citre-use-project-root-when-creating-tags t
          citre-prompt-language-for-ctags-command t)
    (defun citre-jump+ ()
      "Jump to the definition of the symbol at point.
      Fallback to `xref-find-definitions'."
      (interactive)
      (condition-case _
          (citre-jump)
        (error (call-interactively #'xref-find-definitions))))

    (defun citre-jump-back+ ()
      "Go back to the position before last `citre-jump'.
      Fallback to `xref-go-back'."
      (interactive)
      (condition-case _
          (citre-jump-back)
        (error (if (fboundp #'xref-go-back)
                  (call-interactively #'xref-go-back)
                  ;; `xref-pop-marker-stack' is an obsolete function,use `xref-go-back' instead
                (call-interactively #'xref-go-back)))))
    :config
    (with-eval-after-load 'cc-mode (require 'citre-lang-c))
    )
#+end_src

** Direnv
NixOS 上需要开启此插件。如果不是 NixOS 则暂时停用。
#+begin_src emacs-lisp :tangle no
  (when sys/linux
    (use-package direnv
      :ensure nil
      :config
      (direnv-mode))
    )
#+end_src

** Defer Load
#+begin_src emacs-lisp
  ;;with-eval-after-load 'cc-mode
  (require 'lang-cc)
  (require 'lang-json)
  (require 'lang-lisp)
  (require 'lang-rust)
  (require 'lang-python)
  (require 'lang-nix)
#+end_src

** Ends
#+begin_src emacs-lisp
  (provide 'init-lang)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-lang.el ends here
#+end_src

