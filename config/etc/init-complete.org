* init-complete.el
:PROPERTIES:
:HEADER-ARGS: :tangle (concat temporary-file-directory "init-complete.el") :lexical t
:END:

** Headers
#+begin_src emacs-lisp
  ;;; init-complete.el ---   -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code :
#+end_src

** Snippet
1. 使用 =yassnippet= 和 =doom-snippets= 
2. =doom-snippets= 需要下载。克隆命令为：~git clone https://github.com/doomemacs/snippets~
3. 如需使用 =corfu= 补全，取消 ~custom~ 部分的注释，不过个人体验来看 =corfu= 目前不如 =company=
4. ~'~ 表示接下来使用的是常量，括号包裹表示使用的是列表，故而使用 =list= 
5. ~:load-path~ 参数需要一个路径字符串或一个代表路径的符号，可以使用 =lambda= 函数动态实现
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :hook (after-init . yas-global-mode)
    :config
    (setq yas-snippet-dirs (list (expand-file-name "snippets" user-emacs-directory)))

    ;;(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    ;; check corfu frame,if it exists,disable yassnippet keymap
    ;;:custom
    ;;(yas-keymap-disable-hook
    ;;(lambda () (and (frame-live-p corfu--frame)
    ;;                 (frame-visible-p corfu--frame))))
    )

  ;;Clone this repo somewhere local https://github.com/doomemacs/snippets
  (use-package doom-snippets
    ;:load-path "~/.emacs.d/elpa/snippets"
    :load-path (lambda() (expand-file-name "snippets" package-user-dir))
    ;; :quelpa (doom-snippets
    ;;    :fetcher github
    ;;    :repo "doomemacs/snippets")
    :after yasnippet
    )
#+end_src

** Company
功能强大的补全后端， =corfu= 使用感觉效果不好。因此还是使用 =company= 。
使用 =company= 还需要在 =lsp-mode= 中设置一下。
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
    :hook ((after-init . global-company-mode))
    :bind
    (:map company-active-map
          ("<tab>" . company-select-next)
          ("<backtab>" . company-select-previous))
    :commands (company-complete-common
               company-complete-common-or-cycle
               company-manual-begin
               company-grab-line)
    :config
    (setq company-dabbrev-code-everywhere t
          company-dabbrev-code-modes t
          company-dabbrev-code-other-buffers 'all
          company-dabbrev-downcase nil
          company-dabbrev-ignore-case nil
          company-dabbrev-other-buffers 'all
          company-require-match 'never
          company-minimum-prefix-length 2
          company-show-quick-access t
          ;; `company-show-numbers' is an obsolute variable,use `company-show-quick-access' instead
          company-tooltip-limit 10
          company-idle-delay 0
          company-echo-delay 0
          company-tooltip-offset-display 'scrollbar
          company-begin-commands '(self-insert-command)
          company-backends '((company-yasnippet company-dabbrev company-capf company-files)))
    ;;The code above can only show one type of complete method. 
    ;;Unless set all the company-backens in a group by add another ()

    ;;Use the code blow can show code-complete with yasnippet at the same time
    ;;(push '(company-semantic :with company-yasnippet) company-backends)
    ;;(push '(company-capf :with company-yasnippet) company-backends)
    ;;Refer to the doom emacs method,both can be shown at the same time.
    ;;See `init-lang.el'
    )
#+end_src

** Company-yasnippet
配置 =company= 的后端，在点号之后不加载 =yassnippet= 。
#+begin_src emacs-lisp
  ;;company-yasnippet disable after dot
  (defun company-yasnippet/disable-after-dot (fun command &optional arg &rest _ignore)
  (if (eq command 'prefix)
      (let ((prefix (funcall fun 'prefix)))
          (when (and prefix (not (eq (char-before (- (point) (length prefix)))
                              ?.)))
          prefix))
      (funcall fun command arg)))

  (advice-add #'company-yasnippet :around #'company-yasnippet/disable-after-dot)
#+end_src

** Corfu
小而美的补全插件，与 =cape= 配合使用。该部分代码不参与编译。
#+begin_src emacs-lisp :tangle no
  (use-package corfu
    :ensure t
    :hook (after-init . global-corfu-mode)
    :bind  
    (:map corfu-map
          ("SPC" . corfu-insert-separator)
          ("RET". corfu-complete)
          ("TAB" . corfu-next)
          ;;("<tab>" . corfu-next)
          ("S-TAB" . corfu-previous)
          ;;("<backtab>" . corfu-previous)
          ("<escape>" . corfu-quit))
    :custom
    (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)  ;; Enable auto completion
    (corfu-quit-no-match t) ;; Automatically quit if no match
    ;;(corfu-preselect 'prompt) ;; Always preselect the prompt
    (corfu-preview-current t) ;; Disable current candidate preview
    :init
    (global-corfu-mode)
    :config
    (defun corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer if `completion-at-point' is bound."
      (when (where-is-internal #'completion-at-point (list (current-local-map)))
        ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
        (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                    corfu-popupinfo-delay nil)
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
    )
#+end_src

** Cape
提供补全的后端，与 =corfu= 联合使用。该部分代码不参与编译。
#+begin_src emacs-lisp :tangle no
  (use-package cape
    :ensure t
    :after corfu
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-keyword)  ; programming language keyword
    (add-to-list 'completion-at-point-functions #'cape-ispell)
    (add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-symbol)   ; elisp symbol
    (add-to-list 'completion-at-point-functions #'cape-line)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)

    ;; Ensure that pcomplete does not write to the buffer
    ;; and behaves as a pure `completion-at-point-function'.
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
    )
#+end_src
** Ends
#+begin_src emacs-lisp
  (provide 'init-complete)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; init-complete.el ends here
#+end_src

